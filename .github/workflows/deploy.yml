name: Deploy RunCount to S3

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  S3_BUCKET: runcountapp
  CLOUDFRONT_DISTRIBUTION_ID: E3FN1GEXG15HYW

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      env:
        VITE_SUPABASE_KEY: "test-dummy-key-for-ci-testing"
        VITE_SUPABASE_URL: "https://test.supabase.co"
      run: npm test
      
    - name: Build project
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      env:
        VITE_SUPABASE_KEY: ${{ secrets.VITE_SUPABASE_KEY }}
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      run: npm run build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to S3 (excluding index.html)
      run: |
        echo "üì§ Syncing build files to S3 (excluding index.html)..."
        aws s3 sync build/ s3://${{ env.S3_BUCKET }} --size-only --exclude "index.html"
        echo "‚úÖ Build files synced to S3"
        
    - name: Deploy index.html with cache-busting
      run: |
        echo "üîÑ Forcing cache refresh for index.html..."
        aws s3 cp build/index.html s3://${{ env.S3_BUCKET }}/index.html \
          --metadata-directive REPLACE \
          --cache-control max-age=0
        echo "‚úÖ Index.html deployed with cache-busting"
        
    - name: Configure S3 bucket for static website hosting
      run: |
        echo "üîì Setting public access permissions..."
        aws s3api put-public-access-block \
          --bucket ${{ env.S3_BUCKET }} \
          --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
        
        echo "üìú Applying bucket policy..."
        aws s3api put-bucket-policy \
          --bucket ${{ env.S3_BUCKET }} \
          --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::${{ env.S3_BUCKET }}/*"
              }
            ]
          }'
        
        echo "üåê Configuring static website hosting..."
        aws s3api put-bucket-website \
          --bucket ${{ env.S3_BUCKET }} \
          --website-configuration '{
            "IndexDocument": {"Suffix": "index.html"},
            "ErrorDocument": {"Key": "index.html"}
          }'
        echo "‚úÖ S3 bucket configured for static website hosting"
        
    - name: Invalidate CloudFront
      run: |
        echo "üîÑ Invalidating CloudFront distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}..."
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
        echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Deployment Summary
      run: |
        echo "üöÄ RunCount Deployment Summary"
        echo "============================="
        echo "üåê Primary URL: https://runcount.rbios.net"
        echo "üîÑ CloudFront Distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
        echo "üì¶ S3 Bucket: ${{ env.S3_BUCKET }}"
        echo "üåç Region: ${{ env.AWS_REGION }}"
        echo "üìä Status: ${{ needs.deploy.result }}"
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "‚úÖ Deployment completed successfully!"
          echo "üéâ Your RunCount app is now live!"
        else
          echo "‚ùå Deployment failed"
          echo "üîç Check the deployment logs for details"
        fi

